idRef {
  id: "53fdf702643431269731f819"
}
ui_name: "s004-half_shatter_third_time"
nodes {
  idRef {
    id: "53fdf719643431269731f81f"
  }
  index: 0
  text: "Morning, $(story.bro). I\'ve been looking at our options.\n\nHow are you feeling?"
  branches {
    responseText: "Somewhat hung over, but I\'ll live."
    conditions {
      ops {
        functionName: "Compare Actor Attribute"
        args {
          call_value {
            functionName: "Get Map Item (Player)"
            args {
              int_value: 0
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "BaseOrCurrent"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "ActorAttributes"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 5
            }
          }
        }
        args {
          call_value {
            functionName: "Get Story Variable (int)"
            args {
              string_value: "53da5ef2643431a4970041a8"
            }
            args {
              string_value: "Loop2"
            }
          }
        }
      }
      ops {
        functionName: "Match (string)"
        args {
          call_value {
            functionName: "Get Story Variable (string)"
            args {
              string_value: "53da5ef2643431a4970041a8"
            }
            args {
              string_value: "StorySoFar"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "IsOrIsNot"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          string_value: "*Vodka*"
        }
      }
    }
    nextNodeIndex: 1
    auxiliaryLink: true
  }
  branches {
    responseText: "Like I\'ve slept for a week."
    nextNodeIndex: 1
    auxiliaryLink: true
  }
  branches {
    responseText: "Like I\'ve been stuffed into a barrel."
    conditions {
      ops {
        functionName: "Compare Actor Race"
        args {
          call_value {
            functionName: "Get Map Item (Player)"
            args {
              int_value: 0
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "IsOrIsNot"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Race"
            }
            args {
              int_value: 1
            }
          }
        }
      }
    }
    nextNodeIndex: 1
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "53fdf892643431269731f824"
  }
  index: 1
  text: "There\'s some seaweed flakes and soykaf. Help yourself.\n\nBefore we can start with looking at the leads we came up with last night, there\'s one thing we need. Money. I\'m going through a dry spell, and I\'m guessing you don\'t have much either? And don\'t start about handouts, ok? I\'m not asking any for myself.\n\n"
  branches {
    responseText: "All I\'ve got is some pocket change. I just returned from a vacation that ate all my money."
    conditions {
      ops {
        functionName: "Evaluate Nuyen"
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 5
            }
          }
        }
        args {
          int_value: 100
        }
      }
    }
    nextNodeIndex: 2
    auxiliaryLink: true
  }
  branches {
    responseText: "I\'ve got a couple hundred."
    conditions {
      ops {
        functionName: "Evaluate Nuyen"
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 4
            }
          }
        }
        args {
          int_value: 500
        }
      }
      ops {
        functionName: "Evaluate Nuyen"
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 2
            }
          }
        }
        args {
          int_value: 100
        }
      }
    }
    nextNodeIndex: 2
    auxiliaryLink: true
  }
  branches {
    responseText: "I\'ve got a few hundred"
    conditions {
      ops {
        functionName: "Evaluate Nuyen"
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 3
            }
          }
        }
        args {
          int_value: 500
        }
      }
    }
    nextNodeIndex: 2
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "53fdfaa1643431269731f834"
  }
  index: 2
  text: "That\'s not quite enough. I reckon we need about 1000 to even get started, and I have something like 200.\n\nFortunately I have a solution for that. There\'s a simple job I\'ve been meaning to take, and they payoff is 800, but it\'s a two-person gig. We\'re going to do it."
  branches {
    responseText: "Are you out of your mind? Do you think I\'m a shadowrunner?"
    nextNodeIndex: 3
  }
  branches {
    responseText: "Please explain why I would possibly want to be a party to this."
    nextNodeIndex: 3
    auxiliaryLink: true
  }
  branches {
    responseText: "{{CC}}Career: Risk Management{{/CC}} Not really my usual cup of tea, but keep talking."
    conditions {
      ops {
        functionName: "Match (string)"
        args {
          call_value {
            functionName: "Get Story Variable (string)"
            args {
              string_value: "53da5ef2643431a4970041a8"
            }
            args {
              string_value: "pc_careerpath"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "IsOrIsNot"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          string_value: "Risk Management"
        }
      }
    }
    nextNodeIndex: 27
    auxiliaryLink: true
  }
  branches {
    responseText: "{{CC}}Etiquette: Gang{{/CC}} Sounds all right."
    conditions {
      ops {
        functionName: "Compare Actor Skill"
        args {
          call_value {
            functionName: "Get Map Item (Player)"
            args {
              int_value: 0
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "BaseOrCurrent"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "ActorSkills"
            }
            args {
              int_value: 15
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          int_value: 1
        }
      }
    }
    nextNodeIndex: 27
    auxiliaryLink: true
  }
  branches {
    responseText: "{{CC}}Etiquette: Shadowrunner{{/CC}} Tell me about the job."
    conditions {
      ops {
        functionName: "Compare Actor Skill"
        args {
          call_value {
            functionName: "Triggering Actor"
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "BaseOrCurrent"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "ActorSkills"
            }
            args {
              int_value: 17
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          int_value: 1
        }
      }
    }
    nextNodeIndex: 27
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "53fdfcf5643431269731f83e"
  }
  index: 3
  text: "It\'s not your typical shadowrun. It\'s more like a salvage operation. We\'re not doing anything illegal or dangerous."
  branches {
    responseText: "How do you get eight hundred nuyen from a job that\'s not illegal or dangerous?"
    nextNodeIndex: 4
    auxiliaryLink: true
  }
  branches {
    responseText: "Really?"
    nextNodeIndex: 4
    auxiliaryLink: true
  }
  branches {
    responseText: "Please be a bit more specific."
    nextNodeIndex: 4
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "53fdfea5643431269731f846"
  }
  index: 4
  text: "There\'s an abandoned Matrix node lying in the basement of an old municipal building. It should have a load of lost infrastructural data on it - not corporate secrets or anything like that, just stuff useful for people who are still actually living around here. A couple of local mom\'n\'pop-scale operations have pooled their resources and are offering rewards for data like that, to make their work easier.\n\nAnd me, I\'ve located the stuff they are looking for."
  branches {
    responseText: "And you haven\'t just gone and gotten it because...?"
    nextNodeIndex: 5
  }
  branches {
    responseText: "There\'s a catch, isn\'t there?"
    nextNodeIndex: 6
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "53fe070f643431269731f89d"
  }
  index: 5
  text: "I want someone to watch my back while I access the node. Just to prevent any, ah, local color from getting any ideas. It is a rough neighborhood, and a decker in the Matrix is totally defenseless."
  branches {
    responseText: "There\'s nobody else you could get to help you?"
    nextNodeIndex: 7
    auxiliaryLink: true
  }
  branches {
    responseText: "You think I\'m enough?"
    nextNodeIndex: 9
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "53fe0e7764343141cc188b3e"
  }
  index: 6
  text: "Just a small one: there\'s a local gang squatting in the building. They are not particularily aggressive or anything, but I still don\'t fancy decking away by myself in the middle of their turf. Just having someone with me should keep them from having any stupid ideas."
  branches {
    responseText: "Don\'t you have, like, shadowrunner pals to help you with stuff like this?"
    nextNodeIndex: 7
  }
  branches {
    responseText: "A gang. Terrific"
    nextNodeIndex: 9
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "53fe100164343141cc188b46"
  }
  index: 7
  text: "If I took someone else, I\'d have to share the reward with them. I\'d rather share it with you. It\'s not a huge amount of money, but it\'s a start."
  branches {
    responseText: "I don\'t know if I\'m up for this."
    nextNodeIndex: 9
    auxiliaryLink: true
  }
  branches {
    responseText: "Yeah, no thank you."
    nextNodeIndex: 10
    auxiliaryLink: true
  }
  branches {
    responseText: "Okay, what the hell. Let\'s do this!"
    nextNodeIndex: 8
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "53fe1ddf64343141cc189006"
  }
  index: 8
  text: "Wiz! Let\'s get moving!"
  branches {
    responseText: " "
    nextNodeIndex: 31
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "53fe0ffc64343141cc188b44"
  }
  index: 9
  text: "Well, it\'s not that big a deal really. Just, y\'know. Insurance."
  branches {
    responseText: "No. This is crazy. Forget about it. I\'m not doing anything like that."
    nextNodeIndex: 10
  }
  branches {
    responseText: "I\'m going to regret this, but all right."
    nextNodeIndex: 31
    auxiliaryLink: true
  }
  branches {
    responseText: "I suppose you know what you\'re doing. Very well. Let\'s do this."
    nextNodeIndex: 31
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "53fe109364343141cc188b91"
  }
  index: 10
  text: ""
  branches {
    responseText: ""
    conditions {
      ops {
        functionName: "Comparison (int)"
        args {
          call_value {
            functionName: "Get Story Variable (int)"
            args {
              string_value: "53da5ef2643431a4970041a8"
            }
            args {
              string_value: "WantedLevel"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          int_value: 3
        }
      }
    }
    nextNodeIndex: 11
  }
  branches {
    responseText: ""
    conditions {
      ops {
        functionName: "Comparison (int)"
        args {
          call_value {
            functionName: "Get Story Variable (int)"
            args {
              string_value: "53da5ef2643431a4970041a8"
            }
            args {
              string_value: "WantedLevel"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          int_value: 2
        }
      }
    }
    nextNodeIndex: 16
  }
  branches {
    responseText: ""
    conditions {
      ops {
        functionName: "Comparison (int)"
        args {
          call_value {
            functionName: "Get Story Variable (int)"
            args {
              string_value: "53da5ef2643431a4970041a8"
            }
            args {
              string_value: "WantedLevel"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 4
            }
          }
        }
        args {
          int_value: 2
        }
      }
    }
    nextNodeIndex: 21
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "53fe10b164343141cc188b94"
  }
  index: 11
  text: "Y\'know, funny thing I saw on the news. Apparently someone working for Alcamai Cosmetics put some police officers in critical condition in Omaha yesterday morning. They have a name and description and everything - $(story.pc_firstname) $(story.pc_lastname), a mild-mannered $+(l.race) $(l.man). There\'s a reward posted for $(l.him), 1500 nuyen. Maybe you might want to claim that instead?"
  branches {
    responseText: "What-"
    nextNodeIndex: 13
    auxiliaryLink: true
  }
  branches {
    responseText: "Oh drek."
    nextNodeIndex: 13
    auxiliaryLink: true
  }
  branches {
    responseText: "You bastard. Are you blackmailing me?"
    nextNodeIndex: 12
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "53fe118064343141cc188b99"
  }
  index: 12
  text: "No, you idiot! I\'d never do anything like that! I\'m pointing out your fragging hypocrisy!\n\nYou\'re willing to murder some pigs, but unwilling to help me with a simple job. That\'s not just hypocritical, that\'s plain stupid. What the hell else are you going to do, give yourself up?"
  branches {
    responseText: "Drek fragging hoop this is all fragged up."
    nextNodeIndex: 13
    auxiliaryLink: true
  }
  branches {
    responseText: "... hell"
    nextNodeIndex: 13
    auxiliaryLink: true
  }
  branches {
    responseText: "It\'s not ... I mean ..."
    nextNodeIndex: 13
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "53fe120564343141cc188b9e"
  }
  index: 13
  text: "Look. I don\'t care who you\'ve geeked. I\'m sure you have your reasons, and I\'m not going to moralize. Buddha knows I\'ve had to leave a few bodies in my wake, and some of them called themselves cops. I am pointing out that at the moment you don\'t really have a lot of options. \n\nSo. We are doing this. This is your big sister, telling you what we are going to do because you are in trouble and this is how you survive."
  branches {
    responseText: "You\'re taking a page from Grace\'s book?"
    nextNodeIndex: 14
  }
  branches {
    responseText: "Yeah, I guess so. I still wish -- I don\'t know. I fragged up."
    nextNodeIndex: 15
  }
  branches {
    responseText: "Damn right I had my reasons. Okay, let\'s do this."
    nextNodeIndex: 31
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "53fe159f64343141cc188bef"
  }
  index: 14
  text: "The one thing she and I ever saw eye-to-eye on was that you need to take care of your family.\n\nI may have failed to protect Brooklyn, but I\'m not about to fail to protect you."
  branches {
    responseText: " "
    nextNodeIndex: 31
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "53fe152a64343141cc188be9"
  }
  index: 15
  text: "Maybe you did, maybe you didn\'t. It doesn\'t really matter to me. I\'m here for you, no matter what."
  branches {
    responseText: "Thanks."
    nextNodeIndex: 31
    auxiliaryLink: true
  }
  branches {
    responseText: "Sorry if I sounded moralizing earlier. I had no right."
    nextNodeIndex: 31
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "53fe18fd64343141cc188da0"
  }
  index: 16
  text: "Y\'know what I saw on the news just now? You are a wanted fugitive. Apparently you escaped from Omaha PD while being questioned about a murder. They have your name and description out.\n\nI think it\'s safe to say your legal avenues of income are somewhat diminished right now."
  branches {
    responseText: "Drek."
    nextNodeIndex: 17
    auxiliaryLink: true
  }
  branches {
    responseText: "Oh no."
    nextNodeIndex: 17
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "53fe19b064343141cc188da4"
  }
  index: 17
  text: "I want to help you, $(story.bro). Right now helping you means getting you some means to take care of yourself. This thing? It\'s easy and it\'s money, which is like the best thing right now.\n\nSo, stop whining and get with the program. Maybe you can clear your name eventually, but to make it there you\'re going to need to survive until then. So we\'re doing this thing."
  branches {
    responseText: "I should have stayed in that cell."
    conditions {
      ops {
        functionName: "Match (string)"
        args {
          call_value {
            functionName: "Get Story Variable (string)"
            args {
              string_value: "53da5ef2643431a4970041a8"
            }
            args {
              string_value: "StorySoFar"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "IsOrIsNot"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          string_value: "*OmahaEscaped*"
        }
      }
    }
    nextNodeIndex: 18
  }
  branches {
    responseText: "You couldn\'t have cleared my name while arranging my escape?"
    conditions {
      ops {
        functionName: "Match (string)"
        args {
          call_value {
            functionName: "Get Story Variable (string)"
            args {
              string_value: "53da5ef2643431a4970041a8"
            }
            args {
              string_value: "StorySoFar"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "IsOrIsNot"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          string_value: "*OmahaEscaped*"
        }
      }
    }
    nextNodeIndex: 19
  }
  branches {
    responseText: "Well, when you put it that way."
    nextNodeIndex: 31
    auxiliaryLink: true
  }
  branches {
    responseText: "All right, I get it. Okay, let\'s go do this easy job of yours."
    nextNodeIndex: 20
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "5400830b64343179687c3e19"
  }
  index: 18
  text: "Like hell. That would have left you on the mercy of the police, who don\'t care about anything except getting their suspect. This way you can actually do something about things."
  branches {
    responseText: "... I guess."
    nextNodeIndex: 31
    auxiliaryLink: true
  }
  branches {
    responseText: "Fine, whatever, I don\'t have much choice do I?"
    nextNodeIndex: 31
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "53fe1b2f64343141cc188e84"
  }
  index: 19
  text: "You whiny little $(story.insult)! I help you get out of trouble at personal risk, and you moan and gripe that I didn\'t do more?\n\nNo, I couldn\'t have cleared your record just like that. I may, at some point, but frankly right now I think I\'ma charge you for it, just because you are a thankless, insufferable little prat!"
  branches {
    responseText: "Seems like I\'ve got no choice. Okay, let\'s go do your job."
    nextNodeIndex: 31
    auxiliaryLink: true
  }
  branches {
    responseText: "... sorry. I shouldn\'t ... I mean, thanks for getting me out. And you\'re right. Let\'s do this."
    nextNodeIndex: 31
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
  actions {
    ops {
      functionName: "Add To Variable (int)"
      args {
        call_value {
          functionName: "Get Story Variable (int)"
          args {
            string_value: "53da5ef2643431a4970041a8"
          }
          args {
            string_value: "HalfShatterRep"
          }
        }
      }
      args {
        int_value: -1
      }
    }
  }
}
nodes {
  idRef {
    id: "53fe1ca064343141cc188f0d"
  }
  index: 20
  text: "Was that sarcasm?"
  branches {
    responseText: "Yes"
    nextNodeIndex: 31
    auxiliaryLink: true
  }
  branches {
    responseText: "No"
    nextNodeIndex: 31
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "53fe1f0564343141cc189089"
  }
  index: 21
  text: "Fine! Then tell me your brilliant plan of raising enough money to do an investigation. Maybe you\'d like to fly back to Omaha, work your ass off - if they still want you - and wire me the nuyen while the trail grows cold?\n\nOne thing I\'m sure about though; if you were lying cold in a city morgue, and Brooklyn was investigating your murder with me, she wouldn\'t gripe because she had to do something a little out of her comfort zone. You already flew here, that was a good start - now follow through!"
  branches {
    responseText: "That was a low blow."
    nextNodeIndex: 22
  }
  branches {
    responseText: "I could apply for a loan..."
    nextNodeIndex: 23
  }
  branches {
    responseText: "I\'ve got friends who\'ll lend me money."
    conditions {
      ops {
        functionName: "Compare Actor Skill"
        args {
          call_value {
            functionName: "Get Map Item (Player)"
            args {
              int_value: 0
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "BaseOrCurrent"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "ActorSkills"
            }
            args {
              int_value: 16
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          int_value: 1
        }
      }
    }
    nextNodeIndex: 24
  }
  branches {
    responseText: "All right, I get it. Okay, I\'ll help you do this."
    nextNodeIndex: 31
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "53fe206b64343141cc189098"
  }
  index: 22
  text: "It\'s true, though. She would do it. Hell, if you\'d died in a suspicious watercooler accident, I\'d go fragging undercover in your company and wear a tie and all that drek in order to get the bastards who did it. It\'s not like I\'m asking you to attack Aztechnology or something."
  branches {
    responseText: "I don\'t want to imagine you in a tie. All right, let\'s do this."
    nextNodeIndex: 31
    auxiliaryLink: true
  }
  branches {
    responseText: "Sheesh, enough already. Okay, I\'ll help you."
    nextNodeIndex: 31
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "53fe20fd64343141cc18909e"
  }
  index: 23
  text: "I bet the banks are just falling over themselves to give money to people who are facing a murder charge. Yeah, gotta get in on that before the bubble bursts."
  branches {
    responseText: "Okay, okay. I\'ll do it."
    nextNodeIndex: 31
    auxiliaryLink: true
  }
  branches {
    responseText: "Sheesh, I get it no need to get sarcastic."
    nextNodeIndex: 31
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "53fe21cd64343141cc1890a5"
  }
  index: 24
  text: "Then call them!\n\nI\'ve noticed that rich friends tend to thin out when you\'re in real trouble, but if you can get someone to bankroll us, so much the better."
  branches {
    responseText: "Alex could finance us easily."
    nextNodeIndex: 25
  }
  branches {
    responseText: "I\'m fairly sure that given enough time, I can find someone who\'s willing to lend us some petty cash."
    nextNodeIndex: 26
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "53fe222f64343141cc1890a8"
  }
  index: 25
  text: "He could. He won\'t take my calls, though. He\'s surrounded by a wall of managers, secretaries, lawyers and doormen. You\'re welcome to try."
  branches {
    responseText: "Last time I tried to talk to him it took me 48 hours, but I eventually got through."
    nextNodeIndex: 26
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "53fe22a564343141cc1890ab"
  }
  index: 26
  text: "Did I mention the trail was growing cold? Waiting around for someone to take your calls is not helping us.\n\nLook, call your rich friends, call Alex, call whoever, but call them after we do this job, okay?"
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "53fdfead643431269731f848"
  }
  index: 27
  text: "There\'s an old isolated Matrix node in the basement of the abandoned municipal building. It was cut of from the net something like ten years ago. There\'s a load of old infrastructural data still on it.\n\nLong story short, there\'s a cash money reward for that data. However one of the local gangs is squatting near the area where the terminal for the node is. They are probably not going to start anything, but no way am I sitting down in their turf unguarded. Someone just might get the idea to slice my throat for the hell of it."
  branches {
    responseText: "800 sounds like a pretty big sum to pay just for some infrastructural data."
    nextNodeIndex: 28
    hideIfUnavailable: true
    onlyOnce: true
    idRef {
      id: "53fe02a3643431269731f84f"
    }
  }
  branches {
    responseText: "Which gang is this and who are they affiliated with?"
    nextNodeIndex: 29
    hideIfUnavailable: true
    onlyOnce: true
    idRef {
      id: "53fe03d6643431269731f86e"
    }
  }
  branches {
    responseText: "Alright, let\'s do this."
    nextNodeIndex: 31
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "53fe0161643431269731f84e"
  }
  index: 28
  text: "Red Hill has been hit with quite a few catastrophes in the last century, and a lot of stuff has just been lost. The records on, for instance, the sewers or the power cables, are practically nonexistent. A couple of local companies doing repair work and stuff like that have pooled their resources to pay for that data.\n\n... But yeah, they are not paying 800 for that, they\'re only offering 400. I figure there\'s some other stuff in there that\'s worth 400, some old municipal payroll codes and the like, which have no owner at present. If we can grab both sets of data, we can clear out a nice, tidy sum for a day\'s work."
  branches {
    responseText: "I see."
    nextNodeIndex: 27
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "53fe02e1643431269731f85a"
  }
  index: 29
  text: "The Rainmakers. They are just a bunch of street thugs without any big name connections. Not really bad as those things go, but y\'know, it\'s their territory. Somebody just might be having a really bad day or something."
  branches {
    responseText: "Got it."
    nextNodeIndex: 27
    auxiliaryLink: true
  }
  branches {
    responseText: "{{CC}}Etiquette: Gang{{/CC}} I think I\'ve met someone who was with them once."
    nextNodeIndex: 30
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "53fe03a6643431269731f86b"
  }
  index: 30
  text: "Okay, is that good news or bad news?"
  branches {
    responseText: "They\'re faux Native Americans, who wish they were on the other side of the fence. I should be able to reason with them."
    nextNodeIndex: 27
    auxiliaryLink: true
  }
  branches {
    responseText: "It\'s not bad news. We can deal."
    nextNodeIndex: 27
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "53fe03fd643431269731f873"
  }
  index: 31
  text: "Do you need anything before we go? I should have some spare gear lying around here somewhere."
  branches {
    responseText: "Give me a gun."
    conditions {
      ops {
        functionName: "Compare Actor Skill"
        args {
          call_value {
            functionName: "Get Map Item (Player)"
            args {
              int_value: 0
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "BaseOrCurrent"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "ActorSkills"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 2
            }
          }
        }
        args {
          int_value: 0
        }
      }
      ops {
        functionName: "Evaluate If Actor Has Item"
        args {
          call_value {
            functionName: "Specific Actor"
            args {
              call_value {
                functionName: "Get Map Item (Player)"
                args {
                  int_value: 0
                }
              }
            }
            args {
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "HasOrHasNot"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          call_value {
            functionName: "Get Map Item (Item)"
            args {
              string_value: "Berlin_Sh 1 Benelli (Sawed Off)"
            }
          }
        }
      }
    }
    nextNodeIndex: 32
  }
  branches {
    responseText: "Something sharp for self defense, just in case."
    conditions {
      ops {
        functionName: "Compare Actor Skill"
        args {
          call_value {
            functionName: "Triggering Actor"
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "BaseOrCurrent"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "ActorSkills"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 2
            }
          }
        }
        args {
          int_value: 0
        }
      }
      ops {
        functionName: "Evaluate If Actor Has Item"
        args {
          call_value {
            functionName: "Specific Actor"
            args {
              call_value {
                functionName: "Triggering Actor"
              }
            }
            args {
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "HasOrHasNot"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          call_value {
            functionName: "Get Map Item (Item)"
            args {
              string_value: "Sword 1 Machete"
            }
          }
        }
      }
    }
    nextNodeIndex: 33
  }
  branches {
    responseText: "Got a spare deck?"
    conditions {
      ops {
        functionName: "Compare Actor Skill"
        args {
          call_value {
            functionName: "Get Map Item (Player)"
            args {
              int_value: 0
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "BaseOrCurrent"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "ActorSkills"
            }
            args {
              int_value: 5
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 2
            }
          }
        }
        args {
          int_value: 0
        }
      }
      ops {
        functionName: "Evaluate If Actor Has Item"
        args {
          call_value {
            functionName: "Specific Actor"
            args {
              call_value {
                functionName: "Triggering Actor"
              }
            }
            args {
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "HasOrHasNot"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          call_value {
            functionName: "Get Map Item (Item)"
            args {
              string_value: "CyberdeckSony"
            }
          }
        }
      }
    }
    nextNodeIndex: 34
  }
  branches {
    responseText: "You wouldn\'t have a drone in this garabge heap?"
    conditions {
      ops {
        functionName: "Compare Actor Skill"
        args {
          call_value {
            functionName: "Triggering Actor"
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "BaseOrCurrent"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "ActorSkills"
            }
            args {
              int_value: 10
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 2
            }
          }
        }
        args {
          int_value: 0
        }
      }
      ops {
        functionName: "Evaluate If Actor Has Item"
        args {
          call_value {
            functionName: "Specific Actor"
            args {
              call_value {
                functionName: "Triggering Actor"
              }
            }
            args {
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "HasOrHasNot"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          call_value {
            functionName: "Get Map Item (Item)"
            args {
              string_value: "DroneAttackC_Doberman"
            }
          }
        }
      }
    }
    nextNodeIndex: 36
  }
  branches {
    responseText: "This is probably not your cup of tea, but have you got anything with a bit of magic in it?"
    conditions {
      ops {
        functionName: "Compare Actor Skill"
        args {
          call_value {
            functionName: "Triggering Actor"
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "BaseOrCurrent"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "ActorSkills"
            }
            args {
              int_value: 3
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 2
            }
          }
        }
        args {
          int_value: 0
        }
      }
      ops {
        functionName: "Evaluate If Actor Has Item"
        args {
          call_value {
            functionName: "Specific Actor"
            args {
              call_value {
                functionName: "Triggering Actor"
              }
            }
            args {
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "HasOrHasNot"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          call_value {
            functionName: "Get Map Item (Item)"
            args {
              string_value: "Spell Distraction 1"
            }
          }
        }
      }
    }
    nextNodeIndex: 39
  }
  branches {
    responseText: "A grenade or two would be nice."
    conditions {
      ops {
        functionName: "Compare Actor Skill"
        args {
          call_value {
            functionName: "Triggering Actor"
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "BaseOrCurrent"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "ActorSkills"
            }
            args {
              int_value: 2
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "Comparison Ops"
            }
            args {
              int_value: 2
            }
          }
        }
        args {
          int_value: 0
        }
      }
      ops {
        functionName: "Evaluate If Actor Has Item"
        args {
          call_value {
            functionName: "Specific Actor"
            args {
              call_value {
                functionName: "Triggering Actor"
              }
            }
            args {
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "HasOrHasNot"
            }
            args {
              int_value: 0
            }
          }
        }
        args {
          call_value {
            functionName: "Get Map Item (Item)"
            args {
              string_value: "Grenade 1 (Flash)"
            }
          }
        }
      }
    }
    nextNodeIndex: 40
  }
  branches {
    responseText: "I think I\'m good."
    nextNodeIndex: 41
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "53fe2dc564343141cc189492"
  }
  index: 32
  text: "Here\'s an old sawed-off shotgun, will that do?"
  branches {
    responseText: "Sure"
    actions {
      ops {
        functionName: "Add Item to Actor"
        args {
          call_value {
            functionName: "Get Map Item (Item)"
            args {
              string_value: "Berlin_Sh 1 Benelli (Sawed Off)"
            }
          }
        }
        args {
          call_value {
            functionName: "Specific Actor"
            args {
              call_value {
                functionName: "Get Map Item (Player)"
                args {
                  int_value: 0
                }
              }
            }
            args {
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "WithOrWithout"
            }
            args {
              int_value: 1
            }
          }
        }
      }
    }
    nextNodeIndex: -1
  }
  branches {
    responseText: "On second thought give me something else."
    nextNodeIndex: 31
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "53fe2e8564343141cc189537"
  }
  index: 33
  text: "This is my favorite steak knife. The steaks around here are really tough."
  branches {
    responseText: "It certainly looks menacing enough."
    actions {
      ops {
        functionName: "Add Item to Actor"
        args {
          call_value {
            functionName: "Get Map Item (Item)"
            args {
              string_value: "Sword 1 Machete"
            }
          }
        }
        args {
          call_value {
            functionName: "Specific Actor"
            args {
              call_value {
                functionName: "Triggering Actor"
              }
            }
            args {
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "WithOrWithout"
            }
            args {
              int_value: 1
            }
          }
        }
      }
    }
    nextNodeIndex: 31
    auxiliaryLink: true
  }
  branches {
    responseText: "On second thought give me something else."
    nextNodeIndex: 31
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "53fe2d4364343141cc18947e"
  }
  index: 34
  text: "Sure... but you are not going to need it. I\'m going to be doing the decking, you\'ll do the watching."
  branches {
    responseText: "Have you ever been to a municipal Matrix node? I have."
    nextNodeIndex: 35
  }
  branches {
    responseText: "No, I think it will be better the other way around."
    nextNodeIndex: 35
    auxiliaryLink: true
  }
  branches {
    responseText: "On second thought, yeah, give me something else."
    nextNodeIndex: 31
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "53fe308864343141cc189559"
  }
  index: 35
  text: "... I\'m not convinced, but here\'s the deck."
  branches {
    responseText: "Perfect."
    nextNodeIndex: 31
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
  actions {
    ops {
      functionName: "Add Item to Actor"
      args {
        call_value {
          functionName: "Get Map Item (Item)"
          args {
            string_value: "CyberdeckSony"
          }
        }
      }
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Triggering Actor"
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Add Item to Actor"
      args {
        call_value {
          functionName: "Get Map Item (Item)"
          args {
            string_value: "PR Medic 1"
          }
        }
      }
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Triggering Actor"
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 1
          }
        }
      }
    }
    ops {
      functionName: "Add Item to Actor"
      args {
        call_value {
          functionName: "Get Map Item (Item)"
          args {
            string_value: "PR Killer 1"
          }
        }
      }
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Triggering Actor"
            }
          }
          args {
          }
        }
      }
      args {
        call_value {
          functionName: "Get Preset Value (int)"
          args {
            string_value: "WithOrWithout"
          }
          args {
            int_value: 1
          }
        }
      }
    }
  }
}
nodes {
  idRef {
    id: "53fe351b64343141cc189781"
  }
  index: 36
  text: ""
  branches {
    responseText: ""
    conditions {
      ops {
        functionName: "Match (string)"
        args {
          call_value {
            functionName: "Get Story Variable (string)"
            args {
              string_value: "53da5ef2643431a4970041a8"
            }
            args {
              string_value: "StorySoFar"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "IsOrIsNot"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          string_value: "*RelationshipsWithDrones*"
        }
      }
    }
    nextNodeIndex: 37
    hideIfUnavailable: true
    onlyOnce: true
    idRef {
      id: "53fe364d64343141cc189c50"
    }
  }
  branches {
    responseText: ""
    nextNodeIndex: 38
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "53fe35eb64343141cc189c4b"
  }
  index: 37
  text: "I\'m not sure I can give you one. What if you get distracted by its sexiness?"
  branches {
    responseText: "It\'s a chance you\'ll just have to take."
    nextNodeIndex: 38
    auxiliaryLink: true
  }
  branches {
    responseText: "Hannah."
    nextNodeIndex: 38
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "53fe363764343141cc189c4f"
  }
  index: 38
  text: "{{GM}}Hannah points at a really dusty old Doberman under a pile of spare parts.{{/GM}}"
  branches {
    responseText: "Come to me, my pretty!"
    conditions {
      ops {
        functionName: "Match (string)"
        args {
          call_value {
            functionName: "Get Story Variable (string)"
            args {
              string_value: "53da5ef2643431a4970041a8"
            }
            args {
              string_value: "StorySoFar"
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "IsOrIsNot"
            }
            args {
              int_value: 1
            }
          }
        }
        args {
          string_value: "*RelationshipsWithDrones*"
        }
      }
    }
    actions {
      ops {
        functionName: "Add Item to Actor"
        args {
          call_value {
            functionName: "Get Map Item (Item)"
            args {
              string_value: "DroneAttackC_Doberman"
            }
          }
        }
        args {
          call_value {
            functionName: "Specific Actor"
            args {
              call_value {
                functionName: "Triggering Actor"
              }
            }
            args {
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "WithOrWithout"
            }
            args {
              int_value: 1
            }
          }
        }
      }
    }
    nextNodeIndex: 31
    auxiliaryLink: true
  }
  branches {
    responseText: "I can work with this."
    actions {
      ops {
        functionName: "Add Item to Actor"
        args {
          call_value {
            functionName: "Get Map Item (Item)"
            args {
              string_value: "DroneAttackC_Doberman"
            }
          }
        }
        args {
          call_value {
            functionName: "Specific Actor"
            args {
              call_value {
                functionName: "Triggering Actor"
              }
            }
            args {
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "WithOrWithout"
            }
            args {
              int_value: 1
            }
          }
        }
      }
    }
    nextNodeIndex: 31
    auxiliaryLink: true
  }
  branches {
    responseText: "On second thought, yeah, give me something else."
    nextNodeIndex: 31
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "53fe390f64343141cc189c9d"
  }
  index: 39
  text: "I\'m not really sure. I think that piece of crystal there is some kind of magical focus?"
  branches {
    responseText: "Let\'s see."
    actions {
      ops {
        functionName: "Add Item to Actor"
        args {
          call_value {
            functionName: "Get Map Item (Item)"
            args {
              string_value: "Spell Distraction 1"
            }
          }
        }
        args {
          call_value {
            functionName: "Specific Actor"
            args {
              call_value {
                functionName: "Triggering Actor"
              }
            }
            args {
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "WithOrWithout"
            }
            args {
              int_value: 1
            }
          }
        }
      }
    }
    nextNodeIndex: 31
    auxiliaryLink: true
  }
  branches {
    responseText: "On second thought, yeah, give me something else."
    nextNodeIndex: 31
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "53fe3a2764343141cc189cea"
  }
  index: 40
  text: "I hope that flashbang I\'ve been using as a paperweight still works. Be careful with the pin, I think it\'s loose."
  branches {
    responseText: "... I am just going to assume that you\'re kidding and that the grenade is perfectly safe."
    actions {
      ops {
        functionName: "Add Item to Actor"
        args {
          call_value {
            functionName: "Get Map Item (Item)"
            args {
              string_value: "Grenade 1 (Flash)"
            }
          }
        }
        args {
          call_value {
            functionName: "Specific Actor"
            args {
              call_value {
                functionName: "Triggering Actor"
              }
            }
            args {
            }
          }
        }
        args {
          call_value {
            functionName: "Get Preset Value (int)"
            args {
              string_value: "WithOrWithout"
            }
            args {
              int_value: 1
            }
          }
        }
      }
    }
    nextNodeIndex: 31
    auxiliaryLink: true
  }
  branches {
    responseText: "Yeah, I\'m not touching that."
    nextNodeIndex: 31
    auxiliaryLink: true
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "5403259e643431c3339821cb"
  }
  index: 41
  text: "All right! Off we go!"
  branches {
    responseText: ""
    nextNodeIndex: 42
  }
  nodeType: ConversationNodeType_Simple
}
nodes {
  idRef {
    id: "540325a4643431c3339821ce"
  }
  index: 42
  text: ""
  nodeType: ConversationNodeType_Simple
  actions {
    ops {
      functionName: "Add Actor Karma"
      args {
        call_value {
          functionName: "Specific Actor"
          args {
            call_value {
              functionName: "Get Map Item (Player)"
              args {
                int_value: 0
              }
            }
          }
          args {
          }
        }
      }
      args {
        int_value: 1
      }
    }
    ops {
      functionName: "Open Scene"
      args {
        call_value {
          functionName: "Get Map Item (Scene)"
          args {
            string_value: "Family Ties_005"
          }
        }
      }
    }
  }
}
roots {
  nextNodeIndex: 0
}
